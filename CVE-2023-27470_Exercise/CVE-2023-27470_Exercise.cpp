#include <iostream>
#include <fstream>
#include <string>
#include <windows.h>
#include <ctime>
#include <winnt.h>


void logToFile(const char* filename, const char* message) {
    std::ofstream file(filename, std::ios_base::app);
    if (file.is_open()) {
        time_t now = time(nullptr);
        char timestamp[30];
        struct tm timeInfo;
        if (localtime_s(&timeInfo, &now) == 0) {
            strftime(timestamp, sizeof(timestamp), "%Y-%m-%d %H:%M:%S", &timeInfo);
            file << "[" << timestamp << "] " << message << "\n";
        }
        else {
            perror("Error getting local time");
        }
        file.close();
    }
    else {
        perror("Error opening log file");
    }
}

int main() {
    const char* dirPath = "C:\\programdata\\PushUpdates\\*"; 
    const char* logPath = "C:\\programdata\\logs\\log.txt";
    
    // Mitigation Policy
    
    /*
    PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY signature = {0};
    DWORD dwSize = sizeof(signature);
    signature.EnforceRedirectionTrust = 1;
    SetProcessMitigationPolicy(ProcessRedirectionTrustPolicy, &signature, dwSize);
    */


    while (true) {
        WIN32_FIND_DATAA findFileData;  
        HANDLE hFind = FindFirstFileA(dirPath, &findFileData);

        if (hFind != INVALID_HANDLE_VALUE) {
            do {
                if (!(findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)) {
                    char filePath[MAX_PATH];
                    snprintf(filePath, sizeof(filePath), "C:\\programdata\\PushUpdates\\%s", findFileData.cFileName);

                    if (DeleteFileA(filePath)) {
                        char logMessage[MAX_PATH + 50];
                        snprintf(logMessage, sizeof(logMessage), "Deleted file: %s", filePath);
                        logToFile(logPath, logMessage);
                    }
                    else {
                        DWORD error = GetLastError();
                        std::cerr << "Error deleting file: " << error << "\n";
                    }
                }
            } while (FindNextFileA(hFind, &findFileData) != 0);

            FindClose(hFind);
        }
        else {
            DWORD error = GetLastError();
            std::cerr << "Error opening directory: " << error << "\n";
        }

        Sleep(20000);  // Wait for 20 seconds
    }

    return 0;
}
